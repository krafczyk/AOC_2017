Base program

0: set b 93
1: set c b
2: jnz a 2
3: jnz 1 5
4: mul b 100
5: sub b -100000
6: set c b
7: sub c -17000
8: set f 1
9: set d 2
10: set e 2
11: set g d
12: mul g e
13: sub g b
14: jnz g 2
15: set f 0
16: sub e -1
17: set g e
18: sub g b
19: jnz g -8
20: sub d -1
21: set g d
22: sub g b
23: jnz g -13
24: jnz f 2
25: sub h -1
26: set g b
27: sub g c
28: jnz g 2
29: jnz 1 3
30: sub b -17
31: jnz 1 -23

Base program with annotations

0: set b 93
1: set c b
2: jnz a 2 # Jump never executed.
3: jnz 1 5
#4: mul b 100
#5: sub b -100000
#6: set c b
#7: sub c -17000

8: set f 1
9: set d 2

10: set e 2

11: set g d
12: mul g e
13: sub g b
14: jnz g 2
15: set f 0
16: sub e -1
17: set g e
18: sub g b
19: jnz g -8

20: sub d -1
21: set g d
22: sub g b
23: jnz g -13

24: jnz f 2
25: sub h -1
26: set g b
27: sub g c
28: jnz g 2
29: jnz 1 3 # Escape here

30: sub b -17
31: jnz 1 -23



Decompile

#0: set b 93
#1: set c b

b = 93
c = b

#2: jnz a 2 # This is effectively a single branch if statement.
#3: jnz 1 5
if(a != 0) {
#4: mul b 100
#5: sub b -100000
#6: set c b
#7: sub c -17000
#8: set f 1

b *= 100
(Mult += 1)
c = b
c -= 17000
f = 1
}

do {
#8: set f 1 # RE-Entry from #31
#9: set d 2

f = 1
d = 2

do {
#10: set e 2 # RE-Entry from #23
e = 2

do {
#11: set g d # RE-Entry from #19
g = d

#12: mul g e
#13: sub g b

g *= e
g -= b

#14: jnz g 2 (This is effectively a single branch if statement as well
if(g == 0) {
    #15: set f 0
    f = 0
}
#16: sub e -1
#17: set g e
#18: sub g b

e -= 1
g = e
g -= b

#19: jnz g -8
loop end? 
} while(g != 0);


#20: sub d -1
#21: set g d
#22: sub g b
d -= 1
g = d
g -= b
#23: jnz g -13
} while(g != 0);

#24: jnz f 2
if(f == 0) {
    #25: sub h -1
    h -= 1
}
#26: set g b
#27: sub g c
g = b
g -= c

#28: jnz g 2
if (g == 0 ) {
    #29: jnz 1 3
    break
}
#30: sub b -17
b -= 17
#31: jnz 1 -23
} while(true);



Version without comments

b = 93
c = b
if(a != 0) {
    b *= 100
    b -= -100000
    c = b
    c -= -17000
    f = 1
}

do {
    f = 1
    d = 2
    do {
        e = 2
        do {
            g = d
            g *= e
            g -= b
            if(g == 0) {
                f = 0
            }
            e -= -1
            g = e
            g -= b
        } while(g != 0);
        d -= -1
        g = d
        g -= b
    } while(g != 0);

    if(f == 0) {
        h -= -1
    }
    g = b
    g -= c

    if (g == 0 ) {
        break
    }
    b -= -17
} while(true);


Optimized version

a = 0
b = 93
c = b = 93

do {
    d = 2
    do {
        e = 2
        do {
            mult += 1
            e += 1
            g = e
            g -= b
        } while(g != 0);
        d += 1
        g = d
        g -= b
    } while(g != 0);
    // When we reach here, b == c, so we exit right away.

    g = b
    g -= c

    if (g == 0 ) {
        break
    }
    b -= -17
} while(true);

b = 93
c = b = 93

d = 2

e = 2

e = e+1 = 3
g = e = 3
g = g-b = 3-93 = -90

the number of iterations of each loop (n) is determined by
2+n = 93 -> n = 93-2 = 91
and mul is called a total of n*n times, for a total of 8281. (task 1!)

Optimized version with a = 1

a = 1
b = 109300
c = 111000
mult += 1

# N == 1000 loops
do {
    f = 1

    # Here, we determine the number of unique factors >= 2
    d = 2
    do {
        if(b%d == 0) {
            # b is divisible by d.
            f = 0
            break;
        }
        d += 1
    } while(d != b);

    if(f == 0) {
        h += 1
    }

    if (b == c ) {
        break
    }
    b += 17
} while(true);



