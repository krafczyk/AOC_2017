The long runtime of day 18 task 2 shows me that we need
to decompile the program to understand whats going on.

I also added proper stopping conditions to the second emulation
but it didn't halt then either. deconstruction it is.

prog0 initial generation:
8387
9281
551
6152
7244
5947
5254

0 set i 31
1 set a 1
2 mul p 17
3 jgz p p
4 mul a 2
5 add i -1
6 jgz i -2
7 add a -1
8 set i 127
9 set p 826
10 mul p 8505
11 mod p a
12 mul p 129749
13 add p 12345
14 mod p a
15 set b p
16 mod b 10000
17 snd b
18 add i -1
19 jgz i -9
20 jgz a 3
21 rcv b
22 jgz b -1
23 set f 0
24 set i 126
25 rcv a
26 rcv b
27 set p a
28 mul p -1
29 add p b
30 jgz p 4
31 snd a
32 set a b
33 jgz 1 3
34 snd b
35 set f 1
36 add i -1
37 jgz i -11
38 snd a
39 jgz f -16
40 jgz a -19

def program0
    # 0 set i 31
    # 1 set a 1
    # 2 mul p 17
    i = 31
    a = 1
    p = p*17; p == 0
    # 3 jgz p p ## JUMP HERE, p=0 -> next inst, p=1 -> inst 17
    a = 2**i = 2**31 (rolled up loop -> 4,5,6 ->4)
    # 6 jgz i -2 ## JUMP HERE, i == 0, -> no jump
    # 7 add a -1
    a = a-1 # a == 2**31-1
    # 8 set i 127
    i = 127
    # 9 set p 826
    p = 826
    while(i != 0) {
	    # 10 mul p 8505
	    # 11 mod p a
	    # 12 mul p 129749
	    # 13 add p 12345
	    # 14 mod p a
	    # 15 set b p
	    # 16 mod b 10000
	    # 17 snd b
	    # 18 add i -1
	    p *= 8505
	    p %= p%a
	    p *= 129749
	    p += 12345
	    p %= p%a
        send(p%10000)
	    i = i-1
    # 19 jgz i -9 ## Jump here!!
    } # program 0 sends 127 messages here
    # 20 jgz a 3 ## JUMP here, if a != 0 jump ahead by 3
    # 23 set f 0
    f = 0
    # 24 set i 126
    i = 126
    # 25 rcv a
    a = receive();
    # 26 rcv b
    b = receive();
    # 27 set p a
    p = a
    # 28 mul p -1
    p = p*(-1);
    # 29 add p b
    p += b
    # 30 jgz p 4

21 rcv b
22 jgz b -1
31 snd a
32 set a b
33 jgz 1 3
34 snd b
35 set f 1
36 add i -1
37 jgz i -11
38 snd a
39 jgz f -16
40 jgz a -19


def program1:
    # 0 set i 31
    i = 31
    # 1 set a 1
    a = 1
    # 2 mul p 17
    p = 1*17 = 17
    # 3 jgz p p ## JUMP to 20
    # 20 jgz a 3 ## Jump to 23
    # 23 set f 0
    f = 0
    # 24 set i 126
    i = 126
    # 25 rcv a
    a = receive(a) = 8387
    while(i > 0) {
    # loop back point?
    # 26 rcv b
    b = receive(b) = 9281
    # 27 set p a
    p = a # p = 8387
    # 28 mul p -1
    p = -p # p = -8387
    # 29 add p b
    p = p+b = -8387+9281 = 894
    # 30 jgz p 4 # JUMP by 4 to 34 if p > 0
    if (p == 0) {
        # 31 snd a
        send(a)
        # 32 set a b
        a = b
        # 33 jgz 1 3 # JUMP by 3 to 36
    } else {
        # 34 snd b
        send(b)
        # 35 set f 1
        f = 1
    }
    # 36 add i -1
    i -= 1
    # 37 jgz i -11 # JUMP by -11 to 26
    }
    # 38 snd a
    send(a)
    # 39 jgz f -16 
    if (f != 0) {
        # JUMP to 39-16 = 23
    } else {
        # 40 jgz a -19
        if(a != 0) {
            # JUMP to 40-19 = 21
            # 21 rcv b
            # 22 jgz b -1
            while((b = receive()) {
            }
        } else {
            # EXIT
        }
    }

4 mul a 2
5 add i -1
6 jgz i -2
7 add a -1
8 set i 127
9 set p 826
10 mul p 8505
11 mod p a
12 mul p 129749
13 add p 12345
14 mod p a
15 set b p
16 mod b 10000
17 snd b
18 add i -1
19 jgz i -9

30 jgz p 4

